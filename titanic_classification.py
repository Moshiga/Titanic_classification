# -*- coding: utf-8 -*-
"""Titanic Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZX1fP8Jhmr1MKDASQ4a4BgE7nU8ZETk-
"""

# Commented out IPython magic to ensure Python compatibility.
# importing  required libraries
import pandas as pd
from pandas import Series, DataFrame

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Render plots inline
# %matplotlib inline

# import data from csv file
titanic_df = pd.read_csv('/content/titanic_data.csv')

# Checking the number of rows(observations) and colmumns(variables)
titanic_df.shape

titanic_df.head(10) # Looking at first few rows of dataset

# get overall info for the dataset
titanic_df.info()

sns.countplot(x='Sex', data=titanic_df) ## Let's check gender

# Now let's seperate the genders by classes, we can use the 'hue' arguement here!

sns.countplot(x='Sex', data=titanic_df, hue='Pclass')

sns.countplot(x='Pclass', data=titanic_df, hue='Sex')

# We'll treat anyone as under 16 as a child, and then use the apply technique with a function to create a new column

# First let's make a function to sort through the sex
def male_female_child(passenger):
    # Take the Age and Sex
    age,sex = passenger
    # Compare the age, otherwise leave the sex
    if age < 16:
        return 'child'
    else:
        return sex

# Define a new column called 'person', remember to specify axis=1 for columns and not index

titanic_df['Person']= titanic_df[['Age','Sex']].apply(male_female_child, axis=1)

# Let's see if this worked, check out the first ten rows
titanic_df[0:10]

# Let's try the factorplot again!
sns.countplot(x='Pclass', data=titanic_df, hue='Person')

# Quick way to create a histogram using pandas
titanic_df['Age'].hist(bins=70)

titanic_df['Age'].mean() # Get the mean of Age

# We could also get a quick overall comparison of male,female,child

titanic_df['Person'].value_counts()

# Another way to visualize the data is to use FacetGrid to plot multiple kedplots on one plot

# Set the figure equal to a facetgrid with the pandas dataframe as its data source, set the hue, and change the aspect ratio.
fig = sns.FacetGrid(titanic_df, hue="Sex",aspect=4)

# Next use map to plot all the possible kdeplots for the 'Age' column by the hue choice
fig.map(sns.kdeplot,'Age',shade= True)

# Set the x max limit by the oldest passenger
oldest = titanic_df['Age'].max()

#Since we know no one can be negative years old set the x lower limit at 0
fig.set(xlim=(0,oldest))

#Finally add a legend
fig.add_legend()

# We could have done the same thing for the 'person' column to include children:

fig = sns.FacetGrid(titanic_df, hue='Person', aspect=4)

fig.map(sns.kdeplot, 'Age',shade=True)

oldest = titanic_df['Age'].max()

fig.set(xlim= (0,oldest))

fig.add_legend()

# Let's do the same for class by changing the hue argument:

fig = sns.FacetGrid(titanic_df, hue='Pclass', aspect=4)

fig.map(sns.kdeplot, 'Age',shade=True)

oldest = titanic_df['Age'].max()

fig.set(xlim= (0,oldest))

fig.add_legend()

# Let's get a quick look at our dataset again

titanic_df.head(10)

# First we'll drop the NaN values and create a new object, deck

deck = titanic_df['Cabin'].dropna()

# Quick preview of the decks
deck.head()

# So let's grab that letter for the deck level with a simple for loop
# Set empty list
levels = []

# Loop to grab first letter
for level in deck:
    levels.append(level[0])

# Reset DataFrame and use factor plot
cabin_df = DataFrame(levels)

cabin_df.columns = ['Cabin']

sns.countplot(x='Cabin', data=cabin_df, palette='winter_d')

# Redefine cabin_df as everything but where the row was equal to 'T'
cabin_df = cabin_df[cabin_df.Cabin != 'T']
#Replot
sns.countplot(x='Cabin', data=cabin_df, palette='spring_d')

titanic_df.head(10) # Let's take another look at our original data

# Let's start by adding a new column to define alone

# add the parent/child column with the sibsp column

titanic_df['Alone'] =  titanic_df.Parch + titanic_df.SibSp
titanic_df['Alone']

# Look for >0 or ==0 to set alone status
titanic_df['Alone'].loc[titanic_df['Alone'] >0] = 'With Family'
titanic_df['Alone'].loc[titanic_df['Alone'] == 0] = 'Alone'

# Check to make sure it worked

titanic_df.head()

titanic_df['Alone']

# Now let's get a simple visualization!

sns.countplot(x='Alone', data=titanic_df, palette='Purples')

# Let's start by creating a new column for legibility purposes through mapping
titanic_df['Survivor'] = titanic_df.Survived.map({0:'no', 1:'yes'})

# Let's just get a quick overall view of survied vs died.
sns.countplot(x='Survivor', data=titanic_df, palette='plasma')

# use a factor plot again, but now considering class

sns.countplot(x='Pclass',data=titanic_df)

# Let's use a factor plot again, but now considering class and gender

sns.countplot(x='Pclass', hue='Person', data=titanic_df)

titanic_df.head()

sns.countplot(x='Cabin', data=cabin_df, palette='winter_d')

cabin_df.head()

cabin_df = pd.concat([cabin_df, titanic_df['Sex']], axis=1)

cabin_df = pd.concat([cabin_df, titanic_df['Survived']], axis=1)

cabin_df.head()

sns.countplot(x='Cabin',data=cabin_df, hue='Sex', palette='winter_d')

